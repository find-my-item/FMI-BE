name: 기능/개선 요청
description: 새 기능/개선 제안 이슈 템플릿
title: "[기능] <요약>"
labels:
  - type: feature
assignees: []
body:
  - type: markdown
    attributes:
      value: |
        아래 브랜치 전략을 반드시 따릅니다.
        - 모든 작업은 이슈 기반 브랜치에서 진행합니다.
        - main 브랜치에 직접 push/commit 금지, PR로만 머지합니다.
        - 작업 브랜치는 main에서 생성하며 이름은 이슈 키 그대로 사용합니다. 예) FIND-001
        - 의존 이슈가 있을 경우, 필요한 작업물이 있는 브랜치에서 분기합니다. 예) FIND-002 → FIND-001에서 분기
        - 커밋 메시지는 Conventional Commits 양식을 권장합니다. 예) feat: 기능 요약

        브랜치 생성 예시:
        - main 최신화: `git pull --rebase origin main`
        - 브랜치 생성: `git checkout -b <이슈키>` (예: `git checkout -b FIND-001`)

  - type: input
    id: issue_key
    attributes:
      label: 이슈 키
      description: FIND-001 형태로 작성합니다. 브랜치명으로도 사용됩니다.
      placeholder: FIND-001
    validations:
      required: true

  - type: input
    id: branch_name
    attributes:
      label: 브랜치 이름
      description: 기본은 이슈 키를 그대로 사용합니다. (예: FIND-001)
      placeholder: FIND-001
    validations:
      required: true

  - type: textarea
    id: work_summary
    attributes:
      label: 작업 내용
      description: 이번 이슈에서 구현/변경할 내용을 한 줄로 요약하세요.
      placeholder: 로그인/회원가입/비밀번호찾기 공통 UI 컴포넌트(button, input) 및 기능 구현
    validations:
      required: true

  - type: markdown
    attributes:
      value: "## API 설계"

  - type: textarea
    id: api_endpoints
    attributes:
      label: API 엔드포인트 목록
      description: 새로 추가/변경할 모든 엔드포인트를 나열하세요.
      value: |
        - [ ] API 1: [METHOD] /path — 목적/요약
            - 요청 파라미터/바디: { ... }
            - 응답(200): { ... }
            - 오류(4xx/5xx): 코드/메시지 규약
            - 인증/인가: 필요 권한
        - [ ] API 2: [METHOD] /another-path — 목적/요약

  - type: checkboxes
    id: common_checklist
    attributes:
      label: 공통 체크리스트 (모든 API 공통)
      options:
        - label: 요청 값 유효성 검증(Validation)
        - label: 인증/인가 처리(Security)
        - label: 비즈니스 로직/도메인 규칙 반영
        - label: 트랜잭션/동시성 고려
        - label: 오류/예외 처리 및 표준 응답 형식 정리
        - label: 로깅/모니터링(요청ID/traceId 등)
        - label: DB 변경 시 Flyway 마이그레이션 포함 및 롤백 전략
        - label: OpenAPI/Swagger 문서 업데이트
        - label: 단위/통합 테스트 작성 및 통과
        - label: 성능/페이징/인덱스 등 고려
        - label: 배포 영향도 및 롤아웃 전략 확인

  - type: textarea
    id: expected_result
    attributes:
      label: 기대 결과
      description: 사용자가 확인할 수 있는 최종 결과/데모 기준을 적어주세요.

  - type: checkboxes
    id: branch_policy
    attributes:
      label: 브랜치/PR 정책 확인
    
      description: 제출 전 아래 항목을 모두 확인하세요.
      options:
        - label: main에서 브랜치를 생성한다 (예외적으로 의존 브랜치에서 분기 가능)
          required: true
        - label: main에 직접 push/commit 하지 않는다 (반드시 PR로 머지)
          required: true
        - label: PR 대상은 develop 브랜치이다
          required: true
        - label: 커밋 메시지는 Conventional Commits 양식을 따른다 (feat/fix/chore/docs/refactor/test 등)
          required: true


